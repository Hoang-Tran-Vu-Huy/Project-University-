#include "main.h"
#include "stdio.h" 
ADC_HandleTypeDef hadc1;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

uint32_t ADC_0, ADC_1, tong_0, tong_1;
uint8_t dem = 0, i, c, Ampe_max , state = 0;
float Ampe, ADC_9, tong_2, Duty_Cycle, Voltage;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
void ADC_Select_CH0(){
  ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)Error_Handler();
}
void ADC_Select_CH1(){
  ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)Error_Handler();
}
void ADC_Select_CH9(){
  ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Channel = ADC_CHANNEL_9;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)Error_Handler();
}
int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //relay xung
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //relay sac
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //dieu chinh do rong xung-Duty cycle
  while (1)
  {
    if((GPIOB->IDR & GPIO_PIN_8)==0){dem++; if(dem>1)dem=0;}
    if(ADC_1>1000 && ADC_1<4050)
    {
      if(ADC_1>3210 && ADC_1<4050)Ampe_max = 20;
      else if(ADC_1>1920 && ADC_1<3210)Ampe_max = 32;
      else if(ADC_1>1180 && ADC_1<1920)Ampe_max = 63;
      else Ampe_max = 0;
      if(dem == 0)
      {
	if(Voltage>1 && Voltage<7 && state==0)
	{
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,999);
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,999);
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);
	  if(Ampe>0 && Ampe<6)
	  {
	    c=0;
	    state=0;
	    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, Duty_Cycle=89);//9%
	  }else if(Ampe>=6 && Ampe<=51){
	    c=0;
	    state=0;
	    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, Duty_Cycle=(Ampe/0.6)*10-1);
	  }else if(Ampe>51 && Ampe<=80){
	    c=0;
	    state=0;
	    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, Duty_Cycle=(Ampe/2.5+64)*10-1);
	  }else if(Ampe>80 || dem==1){
	    state=1; 
	    dem=0;
	    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,  Duty_Cycle=979);//98%
	    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
	    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
	    HAL_Delay(500);
	  }else if(Ampe==0){
	    c++;
	    HAL_Delay(100);
	    if(c>30)
	    {
	      c=0;
	      __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, Duty_Cycle = 9);//1%
	      __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
	      HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
	    }
	  }
	  if(Ampe>Ampe_max+2)
	  {
	    c=0;
	    state=1;
	    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
	    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
	  }
	}else if(state==1 || (Voltage>7 && Voltage<10 && state==0)){
	  state=0;
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,999);
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, Duty_Cycle = 49);//5%
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
	  c++;
	  HAL_Delay(100);
	  if(c>30)
	  {
	    c=0;
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, Duty_Cycle = 9);//1%
	  }
	}				
    }else if(dem==1){
	dem=0;
	state=1;
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, Duty_Cycle = 979);//98%
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
	HAL_Delay(500);
    }
  }else{
    Ampe_max=0;
    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, Duty_Cycle = 979);
    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0); 			
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
    if(dem==1)dem=0;
  }
  HAL_Delay(100);
//--------------------------------------------------lay gia tri ADC---------------------------------------------------------------------------------
  for(i=0;i<10;i++)
  {
  //do gia tri dien ap o chan CP
  ADC_Select_CH0();
  HAL_ADC_Start(&hadc1);
  HAL_ADC_PollForConversion(&hadc1,100);
  tong_0+=HAL_ADC_GetValue(&hadc1);
  HAL_ADC_Stop(&hadc1); 
	
  //do gia tri dien ap o chan PP
  ADC_Select_CH1();
  HAL_ADC_Start(&hadc1);
  HAL_ADC_PollForConversion(&hadc1,100);
  tong_1+=HAL_ADC_GetValue(&hadc1);
  HAL_ADC_Stop(&hadc1); 
			
  //lay tin hieu cuong do dong dien trong qua trinh sac
  ADC_Select_CH9();
  HAL_ADC_Start(&hadc1);
  HAL_ADC_PollForConversion(&hadc1,100);
  tong_2+=HAL_ADC_GetValue(&hadc1);
  HAL_ADC_Stop(&hadc1);
  }
  ADC_0=(tong_0/i);
  ADC_1=(tong_1/i);
  ADC_9=(tong_2/i);
  tong_0=0;
  tong_1=0;
  tong_2=0;
		
//----------------------------------------dien ap xac nhan cac trang thai sac---------------------------------------------------------------------
Voltage=(ADC_0*3.4*1000*(800+330))/((Duty_Cycle+1)*4095*330);//800 va 330 là 2 dien tro phân áp sau Opamp;
		
//--------------------------------do Ampe khi su dung bien tro 5kohm lam dong dien gia------------------------------------------
Ampe=ADC_9*100/4095; //0-100 Ampe
		
//----------------------------------do Ampe khi su dung ACS712 20A do dong dien sac----------------------------------------------------------------
// Ampe=((ADC_9*3.3/4095)-2.5)/0.1; //2.5 la muc dien ap ban dau (datasheet); 0.1 la do nhay cua ACS712 20A la 100mV/A (sensitivity-datasheet)
//----------------------------------------------------------------------------------------------------------------------------------------------------

  }

}
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}
static void MX_ADC1_Init(void)
{
  ADC_ChannelConfTypeDef sConfig = {0};
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
 
}
static void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 35;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim2);

}
static void MX_TIM3_Init(void)
{

  TIM_ClockConfigTypeDef sClockSourceConfig = {0}; 
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 35;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
   HAL_TIM_MspPostInit(&htim3);

}
static void MX_TIM4_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 35;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 999;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim4);

}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  }
 }